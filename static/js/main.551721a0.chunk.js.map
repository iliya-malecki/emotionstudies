{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WORDS","CHECKS","IMAGES","IMAGE_CHECKS","image","queryString","window","location","search","batch","URLSearchParams","get","App","useState","slide","setSlide","group","setGroup","dish","setDish","undefined","mark","setMark","expReady","setExpReady","wordsEffectTrigger","setWordsEffectTrigger","wordIndex","setWordIndex","checks","setChecks","imageEffectTrigger","setImageEffectTrigger","imageChecks","setImageChecks","useEffect","interval","setInterval","length","clearInterval","timeout","setTimeout","clearTimeout","startWords","Grid","container","Typography","variant","align","item","xs","Button","onClick","Math","random","color","TextField","value","id","label","onChange","e","target","Slider","min","max","evt","newVal","step","marks","disabled","className","toUpperCase","Object","entries","map","key","alignContent","FormControlLabel","control","Checkbox","checked","JSON","stringify","src","alt","axios","post","chat_id","text","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.551721a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\n\r\nconst WORDS = [\r\n'нос', \r\n'корица', \r\n'дышать', \r\n'перец', \r\n'слышать', \r\n'гвоздика', \r\n'дуновение', \r\n'кофе', \r\n'роза', \r\n'видеть', \r\n'уксус', \r\n'аромат', \r\n'выпечка', \r\n'духи', \r\n'пицца'\r\n];\r\n\r\nconst CHECK_WORDS = [\r\n  \"чай\", \r\n  \"нос\", \r\n  \"звук\", \r\n  \"роза\", \r\n  \"стакан\", \r\n  \"перец\", \r\n  \"аромат\", \r\n  \"сыр\", \r\n  \"гвоздика\", \r\n  \"дышать\", \r\n  \"салфетки\", \r\n  \"бровь\", \r\n  \"картина\", \r\n  \"молоко\", \r\n  \"запах\", \r\n  \"мясо\", \r\n  \"дуновение\", \r\n  \"слышать\", \r\n  \"пакет\", \r\n  \"касание\", \r\n  \"весы\", \r\n  \"свечка\", \r\n  \"зонд\", \r\n  \"духи\", \r\n  \"корица\", \r\n  \"уксус\", \r\n  \"вино\", \r\n  \"видеть\", \r\n  \"выпечка\", \r\n  \"кофе\", \r\n  \"пицца\"\r\n  ];\r\n\r\nlet CHECKS = {};\r\n\r\nfor (let word of CHECK_WORDS) {\r\n  CHECKS[word] = false;\r\n}\r\n\r\nconst IMAGES = {\r\n  '1': 'https://i.imgur.com/ON1wsKU.png', \r\n  '2': 'https://i.imgur.com/3VBy4Pc.png', \r\n  '3': 'https://i.imgur.com/E4XgMI1.png', \r\n  '4': 'https://i.imgur.com/lh9RUvs.png', \r\n  '5': 'https://i.imgur.com/2tDdvKK.png', \r\n  '6': 'https://i.imgur.com/LojZieS.png', \r\n  '7': 'https://i.imgur.com/EB6sSyU.png', \r\n  '8': 'https://i.imgur.com/uMqVgyo.png', \r\n  '9': 'https://i.imgur.com/fwqiAGp.png', \r\n  '10': 'https://i.imgur.com/OYQyGsT.png', \r\n  '11': 'https://i.imgur.com/pucqQL5.png', \r\n  '12': 'https://i.imgur.com/Aw7QIux.png', \r\n  '13': 'https://i.imgur.com/ewMXRs4.png', \r\n  '14': 'https://i.imgur.com/xJ5Q0ll.png', \r\n  '15': 'https://i.imgur.com/oCDtNuR.png', \r\n  '16': 'https://i.imgur.com/wXj5sEj.png', \r\n  '17': 'https://i.imgur.com/Srm2FRc.png', \r\n  '18': 'https://i.imgur.com/HoaACuL.png', \r\n  '19': 'https://i.imgur.com/6P7HQue.png', \r\n  '20': 'https://i.imgur.com/ZB48Edb.png', \r\n  '21': 'https://i.imgur.com/j7twqBF.png', \r\n  '22': 'https://i.imgur.com/16Man62.png', \r\n  '23': 'https://i.imgur.com/BEbZ5jR.png', \r\n  '24': 'https://i.imgur.com/NRsc7nm.png', \r\n  '25': 'https://i.imgur.com/dgM0wqv.png'\r\n};\r\n\r\nlet IMAGE_CHECKS = {};\r\n\r\nfor(let image in IMAGES) {\r\n  IMAGE_CHECKS[image] = false;\r\n}\r\n\r\nconst queryString = window.location.search\r\nconst urldata = new URLSearchParams(queryString)\r\nlet batch = urldata.get(\"batch\")\r\n\r\nfunction App() {\r\n  const [slide, setSlide] = useState(0);\r\n  const [group, setGroup] = useState(null);\r\n  const [dish, setDish] = useState('');\r\n  const [mark, setMark] = useState(undefined);\r\n  const [expReady, setExpReady] = useState(false);\r\n  const [wordsEffectTrigger, setWordsEffectTrigger] = useState(false);\r\n  const [wordIndex, setWordIndex] = useState(0);\r\n  const [checks, setChecks] = useState(CHECKS);\r\n  const [imageEffectTrigger, setImageEffectTrigger] = useState(false);\r\n  const [imageChecks, setImageChecks] = useState(IMAGE_CHECKS);\r\n\r\n  useEffect(() => {\r\n    if (wordsEffectTrigger) {\r\n      const interval = setInterval(() => {\r\n        if (wordIndex < WORDS.length - 1) {\r\n          setWordIndex(wordIndex + 1);\r\n        } else {\r\n          setSlide(3);\r\n          clearInterval(interval);\r\n        }\r\n      }, 1000)\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [wordsEffectTrigger, wordIndex]);\r\n\r\n  useEffect(() => {\r\n    if (imageEffectTrigger) {  \r\n      const timeout = setTimeout(() => {\r\n        setSlide(5)\r\n        setImageEffectTrigger(false);\r\n      }, 10000)\r\n\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [imageEffectTrigger])\r\n\r\n  const start = () => {\r\n    setGroup(Math.random() > 0.5 ? 'cont' : 'exp');\r\n    setSlide(1);\r\n  }\r\n\r\n  const setWords = () => {\r\n    setSlide(2);\r\n    startWords();\r\n  }\r\n\r\n  const startWords = () => {\r\n    setWordsEffectTrigger(true)\r\n  }\r\n\r\n  const finish = () => {\r\n    const url = 'https://api.telegram.org/bot1106278055:AAGigFvur0fNqe_FcwwBjkJZ4Ottm5Yzekw/sendMessage';\r\n    axios.post(url, {\r\n      chat_id: '-483728903',\r\n      text: JSON.stringify({\r\n        batch,\r\n        group,\r\n        dish,\r\n        mark,\r\n        checks,\r\n        imageChecks\r\n      })\r\n    });\r\n    setSlide(6);\r\n  }\r\n\r\n  if (slide === 0) {\r\n    return (\r\n      <Grid container>\r\n        <Typography variant=\"h4\" align=\"center\">\r\n          Перед вами исследование особенностей эмоций и связанных с ними процессов.\r\n          Оно займет не больше 1 минуты (да-да, действительно 60 секунд). \r\n          Полученные данные будут использоваться только в научных целях, и исследование полностью анонимно. Участие добровольное, вы можете завершить его в любой момент.\r\n        </Typography>\r\n        <Grid item xs={12}>\r\n          <Button onClick={start} variant=\"contained\" color=\"primary\">\r\n            Начнём\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  if (slide === 1) {\r\n    if (group === 'cont' || expReady) {\r\n      return (\r\n        <Grid container>\r\n          <Typography variant=\"h4\" align=\"center\">\r\n            Обратите внимание на слова, которые по очереди будут появляться на экране\r\n          </Typography>\r\n          <Grid item xs={12}>\r\n            <Button \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n              onClick={setWords}\r\n            >\r\n              Дальше\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      )\r\n    }\r\n\r\n    if (group === 'exp') {\r\n      return (\r\n        <Grid container>\r\n          <Typography variant=\"h4\" align=\"center\">\r\n            Какое ваше любимое кулинарное блюдо? Опишите в нескольких словах, что вам в нем нравится больше всего? <b>ОБЯЗАТЕЛЬНО</b>\r\n          </Typography>\r\n          <TextField value={dish} id=\"filled-basic\" label=\"Опишите\" variant=\"filled\" onChange={e => setDish(e.target.value)}/>\r\n          <Typography variant=\"h4\" align=\"center\">\r\n            Оцените по шкале от 1 до 10, насколько вам нравится это блюдо: 1 – нейтральное отношение, 10 - гастрономический экстаз\r\n          </Typography>\r\n          <Slider \r\n            min={1} \r\n            max={10} \r\n            value={mark ? mark : 1} \r\n            onChange={(evt, newVal) => setMark(newVal)} \r\n            step={1}\r\n            marks \r\n          />\r\n          <Grid item xs={12}>\r\n            <Button \r\n              disabled={mark === undefined || dish === ''} \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n              onClick={() => setExpReady(true)}\r\n            >\r\n              Дальше\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      )\r\n    }\r\n  }\r\n\r\n    if (slide === 2) {\r\n      return (\r\n      <>\r\n          <Typography variant=\"h4\" align=\"center\" className=\"word\">\r\n            {WORDS[wordIndex].toUpperCase()}\r\n          </Typography>\r\n      </>\r\n      )\r\n    }\r\n\r\n    if (slide === 3) {\r\n      return (\r\n        <Grid container>\r\n          <Typography variant=\"h4\" align=\"center\">\r\n            Попробуйте вспомнить эти слова, и отметить в списке те, которые появлялись на экране. <b>ОТМЕТЬТЕ ХОТЯ-БЫ ОДНО</b>\r\n          </Typography>\r\n          {Object.entries(checks).map(([key, value]) => (\r\n            <Grid item xs={12} key={key} alignContent=\"center\">\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={value}\r\n                    onChange={(e) => setChecks({...checks, [key]: e.target.checked})}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label={key.toUpperCase()}\r\n              />\r\n            </Grid>\r\n          ))\r\n          }\r\n          <Grid item xs={12}>\r\n            <Button \r\n              disabled={JSON.stringify(checks) === JSON.stringify(CHECKS)} \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n              onClick={() => setSlide(4)}\r\n            >\r\n              Дальше\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      )\r\n    }\r\n\r\n    if (slide === 4) {\r\n      return <>\r\n        {\r\n          imageEffectTrigger ?\r\n          <img src=\"https://i.imgur.com/dHzYY8O.png\" alt=\"много символов\"/> :\r\n          <Grid container>\r\n            <Typography variant=\"h4\" align=\"center\">\r\n              Сейчас вы увидите изображения фигур. У вас есть 10 секунд, чтобы постараться запомнить как можно большее количество фигур\r\n            </Typography>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={() => setImageEffectTrigger(true)}>\r\n                Дальше\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n      </>\r\n    }\r\n\r\n    if (slide === 5) {\r\n      return <Grid container>\r\n        <Typography variant=\"h4\" align=\"center\">\r\n          А сейчас среди нарисованных фигур выберите те, которые видели на предыдущей картинке. <b>ВЫБЕРИТЕ ХОТЯ-БЫ ОДНУ</b>\r\n        </Typography>\r\n        {Object.entries(imageChecks).map(([key, value]) => (\r\n          <Grid item xs={12} key={key} alignContent=\"center\">\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={value}\r\n                  onChange={(e) => setImageChecks({...imageChecks, [key]: e.target.checked})}\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label={<img src={IMAGES[key]} alt=\"key\"/>}\r\n            />\r\n          </Grid>\r\n          ))\r\n        }\r\n        <Grid item xs={12}>\r\n          <Button \r\n            disabled={JSON.stringify(imageChecks) === JSON.stringify(IMAGE_CHECKS)}\r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={finish}\r\n          >\r\n            Закончить тест\r\n          </Button>\r\n        </Grid> \r\n      </Grid>\r\n    }\r\n\r\n    if (slide === 6) {\r\n      return <Typography variant=\"h4\" align=\"center\">\r\n        Спасибо! Ваши результаты были сохранены\r\n      </Typography>\r\n    }\r\n\r\n    return null;\r\n    \r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}