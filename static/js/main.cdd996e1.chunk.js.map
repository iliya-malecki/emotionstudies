{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WORDS","CHECKS","IMAGES","IMAGE_CHECKS","image","App","useState","slide","setSlide","group","setGroup","dish","setDish","undefined","mark","setMark","expReady","setExpReady","wordsEffectTrigger","setWordsEffectTrigger","wordIndex","setWordIndex","checks","setChecks","imageEffectTrigger","setImageEffectTrigger","imageChecks","setImageChecks","useEffect","interval","setInterval","length","clearInterval","timeout","setTimeout","clearTimeout","startWords","Grid","container","Typography","variant","align","item","xs","Button","onClick","Math","random","color","TextField","value","id","label","onChange","e","target","Slider","min","max","evt","newVal","step","marks","disabled","className","toUpperCase","Object","entries","map","key","alignContent","FormControlLabel","control","Checkbox","checked","JSON","stringify","src","alt","axios","post","chat_id","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdd996e1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/core/Slider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\n\nimport axios from 'axios';\n\nimport './App.css';\n\nconst WORDS = [\n'нос', \n'корица', \n'дышать', \n'перец', \n'слышать', \n'гвоздика', \n'дуновение', \n'кофе', \n'роза', \n'видеть', \n'уксус', \n'аромат', \n'выпечка', \n'духи', \n'пицца'\n];\n\nconst CHECK_WORDS = [\n  \"чай\", \n  \"нос\", \n  \"звук\", \n  \"роза\", \n  \"стакан\", \n  \"перец\", \n  \"аромат\", \n  \"сыр\", \n  \"гвоздика\", \n  \"дышать\", \n  \"салфетки\", \n  \"бровь\", \n  \"картина\", \n  \"молоко\", \n  \"запах\", \n  \"мясо\", \n  \"дуновение\", \n  \"слышать\", \n  \"пакет\", \n  \"касание\", \n  \"весы\", \n  \"свечка\", \n  \"зонд\", \n  \"духи\", \n  \"корица\", \n  \"уксус\", \n  \"вино\", \n  \"видеть\", \n  \"выпечка\", \n  \"кофе\", \n  \"пицца\"\n  ];\n\nlet CHECKS = {};\n\nfor (let word of CHECK_WORDS) {\n  CHECKS[word] = false;\n}\n\nconst IMAGES = {\n  '1': 'https://i.imgur.com/ON1wsKU.png', \n  '2': 'https://i.imgur.com/3VBy4Pc.png', \n  '3': 'https://i.imgur.com/E4XgMI1.png', \n  '4': 'https://i.imgur.com/lh9RUvs.png', \n  '5': 'https://i.imgur.com/2tDdvKK.png', \n  '6': 'https://i.imgur.com/LojZieS.png', \n  '7': 'https://i.imgur.com/EB6sSyU.png', \n  '8': 'https://i.imgur.com/uMqVgyo.png', \n  '9': 'https://i.imgur.com/fwqiAGp.png', \n  '10': 'https://i.imgur.com/OYQyGsT.png', \n  '11': 'https://i.imgur.com/pucqQL5.png', \n  '12': 'https://i.imgur.com/Aw7QIux.png', \n  '13': 'https://i.imgur.com/ewMXRs4.png', \n  '14': 'https://i.imgur.com/xJ5Q0ll.png', \n  '15': 'https://i.imgur.com/oCDtNuR.png', \n  '16': 'https://i.imgur.com/wXj5sEj.png', \n  '17': 'https://i.imgur.com/Srm2FRc.png', \n  '18': 'https://i.imgur.com/HoaACuL.png', \n  '19': 'https://i.imgur.com/6P7HQue.png', \n  '20': 'https://i.imgur.com/ZB48Edb.png', \n  '21': 'https://i.imgur.com/j7twqBF.png', \n  '22': 'https://i.imgur.com/16Man62.png', \n  '23': 'https://i.imgur.com/BEbZ5jR.png', \n  '24': 'https://i.imgur.com/NRsc7nm.png', \n  '25': 'https://i.imgur.com/dgM0wqv.png'\n};\n\nlet IMAGE_CHECKS = {};\n\nfor(let image in IMAGES) {\n  IMAGE_CHECKS[image] = false;\n}\n\nfunction App() {\n  const [slide, setSlide] = useState(0);\n  const [group, setGroup] = useState(null);\n  const [dish, setDish] = useState('');\n  const [mark, setMark] = useState(undefined);\n  const [expReady, setExpReady] = useState(false);\n  const [wordsEffectTrigger, setWordsEffectTrigger] = useState(false);\n  const [wordIndex, setWordIndex] = useState(0);\n  const [checks, setChecks] = useState(CHECKS);\n  const [imageEffectTrigger, setImageEffectTrigger] = useState(false);\n  const [imageChecks, setImageChecks] = useState(IMAGE_CHECKS);\n\n  useEffect(() => {\n    if (wordsEffectTrigger) {\n      const interval = setInterval(() => {\n        if (wordIndex < WORDS.length - 1) {\n          setWordIndex(wordIndex + 1);\n        } else {\n          setSlide(3);\n          clearInterval(interval);\n        }\n      }, 1000)\n\n      return () => clearInterval(interval);\n    }\n  }, [wordsEffectTrigger, wordIndex]);\n\n  useEffect(() => {\n    if (imageEffectTrigger) {  \n      const timeout = setTimeout(() => {\n        setSlide(5)\n        setImageEffectTrigger(false);\n      }, 10000)\n\n      return () => clearTimeout(timeout);\n    }\n  }, [imageEffectTrigger])\n\n  const start = () => {\n    setGroup(Math.random() > 0.5 ? 'cont' : 'exp');\n    setSlide(1);\n  }\n\n  const setWords = () => {\n    setSlide(2);\n    startWords();\n  }\n\n  const startWords = () => {\n    setWordsEffectTrigger(true)\n  }\n\n  const finish = () => {\n    const url = 'https://api.telegram.org/bot1106278055:AAGigFvur0fNqe_FcwwBjkJZ4Ottm5Yzekw/sendMessage';\n    axios.post(url, {\n      chat_id: '-483728903',\n      text: JSON.stringify({\n        group,\n        dish,\n        mark,\n        checks,\n        imageChecks\n      })\n    });\n    setSlide(6);\n  }\n\n  if (slide === 0) {\n    return (\n      <Grid container>\n        <Typography variant=\"h4\" align=\"center\">\n          Перед вами исследование особенностей эмоций и связанных с ними процессов.\n          Оно займет не больше 1 минуты (да-да, действительно 60 секунд). \n          Полученные данные будут использоваться только в научных целях, и исследование полностью анонимно. Участие добровольное, вы можете завершить его в любой момент.\n        </Typography>\n        <Grid item xs={12}>\n          <Button onClick={start} variant=\"contained\" color=\"primary\">\n            Начнём\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  if (slide === 1) {\n    if (group === 'cont' || expReady) {\n      return (\n        <Grid container>\n          <Typography variant=\"h4\" align=\"center\">\n            Обратите внимание на слова, которые по очереди будут появляться на экране\n          </Typography>\n          <Grid item xs={12}>\n            <Button \n              variant=\"contained\" \n              color=\"primary\" \n              onClick={setWords}\n            >\n              Дальше\n            </Button>\n          </Grid>\n        </Grid>\n      )\n    }\n\n    if (group === 'exp') {\n      return (\n        <Grid container>\n          <Typography variant=\"h4\" align=\"center\">\n            Какое ваше любимое кулинарное блюдо? Опишите в нескольких словах, что вам в нем нравится больше всего? <b>ОБЯЗАТЕЛЬНО</b>\n          </Typography>\n          <TextField value={dish} id=\"filled-basic\" label=\"Опишите\" variant=\"filled\" onChange={e => setDish(e.target.value)}/>\n          <Typography variant=\"h4\" align=\"center\">\n            Оцените по шкале от 1 до 10, насколько вам нравится это блюдо: 1 – нейтральное отношение, 10 - гастрономический экстаз\n          </Typography>\n          <Slider \n            min={1} \n            max={10} \n            value={mark ? mark : 1} \n            onChange={(evt, newVal) => setMark(newVal)} \n            step={1}\n            marks \n          />\n          <Grid item xs={12}>\n            <Button \n              disabled={mark === undefined || dish === ''} \n              variant=\"contained\" \n              color=\"primary\" \n              onClick={() => setExpReady(true)}\n            >\n              Дальше\n            </Button>\n          </Grid>\n        </Grid>\n      )\n    }\n  }\n\n    if (slide === 2) {\n      return (\n      <>\n          <Typography variant=\"h4\" align=\"center\" className=\"word\">\n            {WORDS[wordIndex].toUpperCase()}\n          </Typography>\n      </>\n      )\n    }\n\n    if (slide === 3) {\n      return (\n        <Grid container>\n          <Typography variant=\"h4\" align=\"center\">\n            Попробуйте вспомнить эти слова, и отметить в списке те, которые появлялись на экране. <b>ОТМЕТЬТЕ ХОТЯ-БЫ ОДНО</b>\n          </Typography>\n          {Object.entries(checks).map(([key, value]) => (\n            <Grid item xs={12} key={key} alignContent=\"center\">\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={value}\n                    onChange={(e) => setChecks({...checks, [key]: e.target.checked})}\n                    color=\"primary\"\n                  />\n                }\n                label={key.toUpperCase()}\n              />\n            </Grid>\n          ))\n          }\n          <Grid item xs={12}>\n            <Button \n              disabled={JSON.stringify(checks) === JSON.stringify(CHECKS)} \n              variant=\"contained\" \n              color=\"primary\" \n              onClick={() => setSlide(4)}\n            >\n              Дальше\n            </Button>\n          </Grid>\n        </Grid>\n      )\n    }\n\n    if (slide === 4) {\n      return <>\n        {\n          imageEffectTrigger ?\n          <img src=\"https://i.imgur.com/dHzYY8O.png\" alt=\"много символов\"/> :\n          <Grid container>\n            <Typography variant=\"h4\" align=\"center\">\n              Сейчас вы увидите изображения фигур. У вас есть 10 секунд, чтобы постараться запомнить как можно большее количество фигур\n            </Typography>\n            <Grid item xs={12}>\n              <Button variant=\"contained\" color=\"primary\" onClick={() => setImageEffectTrigger(true)}>\n                Дальше\n              </Button>\n            </Grid>\n          </Grid>\n        }\n      </>\n    }\n\n    if (slide === 5) {\n      return <Grid container>\n        <Typography variant=\"h4\" align=\"center\">\n          А сейчас среди нарисованных фигур выберите те, которые видели на предыдущей картинке. <b>ВЫБЕРИТЕ ХОТЯ-БЫ ОДНУ</b>\n        </Typography>\n        {Object.entries(imageChecks).map(([key, value]) => (\n          <Grid item xs={12} key={key} alignContent=\"center\">\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={value}\n                  onChange={(e) => setImageChecks({...imageChecks, [key]: e.target.checked})}\n                  color=\"primary\"\n                />\n              }\n              label={<img src={IMAGES[key]} alt=\"key\"/>}\n            />\n          </Grid>\n          ))\n        }\n        <Grid item xs={12}>\n          <Button \n            disabled={JSON.stringify(imageChecks) === JSON.stringify(IMAGE_CHECKS)}\n            variant=\"contained\" \n            color=\"primary\" \n            onClick={finish}\n          >\n            Закончить тест\n          </Button>\n        </Grid> \n      </Grid>\n    }\n\n    if (slide === 6) {\n      return <Typography variant=\"h4\" align=\"center\">\n        Спасибо! Ваши результаты были сохранены\n      </Typography>\n    }\n\n    return null;\n    \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}